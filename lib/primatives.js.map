{"version":3,"sources":["../src/primatives.js"],"names":["isNumber","value","BigNumber","require","e","checkPrimative","expectation","toLowerCase"],"mappings":"mEACA,KAAMA,CAAAA,QAAQ,CAAIC,KAAD,EAAW,CAG1B,GAAIA,KAAK,GAAK,IAAd,CAAoB,CAGlB,GAAI,MAAQA,CAAAA,KAAR,EAAkB,QAAlB,EAA8B,MAAQA,CAAAA,KAAR,EAAkB,QAApD,CAA8D,MAAO,KAAP,CAG9D,GAAI,CAGF,KAAM,CAAEC,SAAF,EAAgBC,OAAO,UAA7B,CAGA,GAAIF,KAAK,WAAYC,CAAAA,SAArB,CAAgC,MAAO,KAGxC,CAAC,MAAOE,CAAP,CAAU,CAAE,CACf,CAGD,MAAO,MACR,CAvBD,CA0BO,KAAMC,CAAAA,cAAc,CAAG,CAACJ,KAAD,CAAQK,WAAR,GAAwB,CAGpDA,WAAW,CAAGA,WAAW,CAACC,WAAZ,EAAd,CAGA,GAAID,WAAW,EAAI,QAAnB,CAA6B,CAG3B,GAAIN,QAAQ,CAACC,KAAD,CAAZ,CAAqB,MAAO,KAG7B,CAND,IAMO,IAAI,MAAQA,CAAAA,KAAR,EAAkBK,WAAtB,CAAmC,MAAO,KAAP,CAG1C,MAAO,MACR,CAhBM,C","sourcesContent":["// Define a validation function for checking numbers\nconst isNumber = (value) => {\n\n  // Check there is a value\n  if (value !== null) {\n\n    // Check if the type is a 'number' or 'bigint'\n    if (typeof (value) == 'number' || typeof (value) == 'bigint') return true;\n\n    // Try check for 'mathjs types'\n    try {\n\n      // Load attempt to load 'mathjs'\n      const { BigNumber } = require('mathjs');\n\n      // Check if the type is a BigNumber\n      if (value instanceof BigNumber) return true;\n    \n    // Do nothing with the error / ignore it\n    } catch (e) {}\n  }\n\n  // Return false as the type is not a number\n  return false;\n};\n\n// Check the primative types\nexport const checkPrimative = (value, expectation) => {\n\n  // Cast the expectation to a lowercase string\n  expectation = expectation.toLowerCase();\n\n  // Check if the expectation is a number\n  if (expectation == 'number') {\n\n    // Check using the is number function, and return true if it passes\n    if (isNumber(value)) return true;\n   \n  // Check using the typeof operation, and return true if the check passes\n  } else if (typeof (value) == expectation) return true;\n\n  // Return false as the value did not pass checks\n  return false;\n};"],"file":"primatives.js"}